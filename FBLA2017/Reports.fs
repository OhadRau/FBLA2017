namespace FEC

module Reports = // Provides functions for generating reports
    open FsXaml
    open System
    open System.IO
    open System.Linq
    open System.Windows
    open FSharp.Charting
    open System.Windows.Controls
    open System.Drawing.Printing
    open Microsoft.FSharp.Reflection
    open System.Windows.Media.Imaging

    open FEC.Data

    (* Shows a chart, generated by the F# Charting library,
       as a new window containing the chart and buttons to
       either print the chart or cancel the operation. *)
    let showChart (chart : ChartTypes.GenericChart) =
        // Event handlers for "Cancel" and "Print":
        let cancel (form : Forms.Form) _ _ = // Take a form, so that we can close out of it
            form.Close ()
        let print _ _ =
            // Create a temporary location to store the .png file
            let loc = Path.Combine (Path.GetTempPath (), "report.png")
            // Save the chart as a temporary .png file in the temporary location
            chart.SaveChartAs (loc, ChartTypes.ChartImageFormat.Png)
            // Convert the saved image into a printable image
            let img = Drawing.Image.FromFile loc
            // Create a printable document
            let doc = PrintDocument ()
            // Add a print event handler to the document
            doc.PrintPage.Add (fun e ->
                // When printing, paste the image (img) onto the top left of the document
                e.Graphics.DrawImage(img, Drawing.Point(0, 0)))
            doc.Print() // Run the print event handler
            File.Delete "report.png" // Erase the temporary file
        let form = chart.ShowChart () // Show the chart as a new Windows Form
        form.Menu <- Forms.MainMenu [| // Add a MainMenu to the chart's window
            // Add a Cancel button that calls "cancel" with the current form
            Forms.MenuItem ("Cancel", EventHandler (cancel form));
            // Add a Print button that calls "print"
            Forms.MenuItem ("Print", EventHandler print)
        |]

    // Create a chart showing the days of the week with the highest attendance
    let peakDays conn =
        // Get the attendance data for every recorded week
        let allWeeks = Data.getAllAttendance conn
        
        // Create a function to sum each day of the week in two weeks
        let addWeeks acc week = { Sunday = acc.Sunday + week.Sunday
                                ; Monday = acc.Monday + week.Monday
                                ; Tuesday = acc.Tuesday + week.Tuesday
                                ; Wednesday = acc.Wednesday + week.Wednesday
                                ; Thursday = acc.Thursday + week.Thursday
                                ; Friday = acc.Friday + week.Friday
                                ; Saturday = acc.Saturday + week.Saturday
                                }

        // Make sure there are already weeks in the database
        if allWeeks.Count = 0 then ignore <| MessageBox.Show "Please log attendance before generating a report" else
            (* Using addWeeks, reduce the hours of every week into a single day's worth of
               attendance. Then, reduce all the weeks using addWeeks to get a final sum of
               attendance (by day of the week). *)
            let sum = allWeeks.ToArray () |> Seq.map (Seq.reduce addWeeks) |> Seq.reduce addWeeks
            // Create a list of fields (AKA days of the week) in the Hour<'a> type
            let fields = FSharpType.GetRecordFields (sum.GetType ())
        
            // Convert every one of these days into an ordered pair with the name of that day and the value for that day
            Seq.map (fun (field : Reflection.PropertyInfo) -> field.Name, field.GetValue sum :?> int) fields
            |> Chart.Line // Graph the ordered pairs on a line chart
            // Use "Day of Week" as the X-axis heading and make labels on the X-axis fit side-by-side
            |> Chart.WithXAxis (Title = "Day of Week", LabelStyle = ChartTypes.LabelStyle (Angle = -45, Interval = 1.0))
            // Use "Number of Customers" as the Y-axis heading
            |> Chart.WithYAxis (Title = "Number of Customers")
            |> showChart // Show the chart in a new window

    // Create a chart showing the hours of day with the highest attendance
    let peakHours conn =
        // Get the attendance data for every recorded week
        let allWeeks = Data.getAllAttendance conn

        // Create a function to sum the days of the week by hour (creating a list of customers / hour)
        let addDays week = week.Sunday + week.Monday + week.Tuesday + week.Wednesday + week.Thursday + week.Friday + week.Saturday
        
        // Make sure there are already weeks in the database
        if allWeeks.Count = 0 then ignore <| MessageBox.Show "Please log attendance before generating a report" else
            // Using addDays, reduce each Hour<int> into a single int
            let sums = allWeeks.ToArray () |> Array.map (Array.map addDays)
            // "Fold" across the array, summing up every single week along a single hour
            let hourSums = Array.fold (fun a b -> [| for i in 0..23 -> Seq.item i a + Seq.item i b |]) (Array.init 24 (fun _ -> 0)) sums

            let labels = // A list of labels for each hour ("12:00 AM", "1:00 AM", ...)
                let hour_of_int i = // Function to convert an int (0-23) into an hour label
                    (* If the hour is divisible by 12, then the hour is called "12"
                       (i.e. 12 AM and 12 PM). Otherwise, it keeps the same number,
                       module 12 (e.g. hour #2 = 2 AM, hour #14 = 2 PM). *)
                    let hour = if i % 12 = 0 then 12 else i % 12
                    let period = if i < 12 then "AM" else "PM" // Before noon is "AM", after is "PM"
                    sprintf "%i:00 %s" hour period // Format this information into a time string
                List.map hour_of_int [0..23] // Turn every int from 0 to 23 into an hour label

            Seq.zip labels hourSums // Combine the list of labels and the list of hours into a list of ordered pairs
            |> Chart.Line // Graph the ordered pairs on a line chart
            // Use "Time of Day" as the X-axis heading and make labels on the X-axis fit side-by-side
            |> Chart.WithXAxis (Title = "Time of Day", LabelStyle = ChartTypes.LabelStyle (Angle = -45, Interval = 1.0))
            // Use "Number of Customers" as the Y-axis heading
            |> Chart.WithYAxis (Title = "Number of Customers")
            |> showChart // Show the chart in a new window